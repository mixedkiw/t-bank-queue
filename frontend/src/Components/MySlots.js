import React, { useState, useEffect, useRef } from 'react'
import getMyQueueStatus from '../Api/getMyQueueStatus.js'
import leaveQueue from '../Api/leaveQueue.js'
import joinQueue from '../Api/joinQueue.js'
import '../Styles/MySlots.css'

function MySlots({ userData }) {
    const [slots, setSlots] = useState([])
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState('')
    const [notifications, setNotifications] = useState([])
    const previousSlotsRef = useRef([])

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –æ—á–µ—Ä–µ–¥—è—Ö
    const loadMySlots = async () => {
        try {
            setLoading(true)
            const slotsData = await getMyQueueStatus(userData.device_id)
            setSlots(slotsData || [])

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            checkForChanges(previousSlotsRef.current, slotsData || [])
            previousSlotsRef.current = slotsData || []

        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –æ—á–µ—Ä–µ–¥—è—Ö')
            console.error('Error loading slots:', err)
        } finally {
            setLoading(false)
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const checkForChanges = (previous, current) => {
        previous.forEach(prevSlot => {
            const currentSlot = current.find(s => s.station.id === prevSlot.station.id)
            if (currentSlot) {
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—ã—Å—Ç—Ä–æ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏
                if (prevSlot.position > 2 && currentSlot.position === 1) {
                    addNotification(
                        'üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ!',
                        `–í—ã —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ "${currentSlot.station.name}"`
                    )
                }
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ
                else if (prevSlot.estimated_wait_minutes < currentSlot.estimated_wait_minutes + 5) {
                    addNotification(
                        '‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏',
                        `–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ "${currentSlot.station.name}" —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å`
                    )
                }
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å
                else if (prevSlot.position > 1 && currentSlot.position === 1) {
                    addNotification(
                        'üéâ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!',
                        `–ü–æ–¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ "${currentSlot.station.name}"`
                    )
                }
            }
        })
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const addNotification = (title, message) => {
        const newNotification = {
            id: Date.now(),
            title,
            message,
            timestamp: new Date()
        }

        setNotifications(prev => [newNotification, ...prev.slice(0, 4)]) // –ú–∞–∫—Å–∏–º—É–º 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            setNotifications(prev => prev.filter(n => n.id !== newNotification.id))
        }, 10000)
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ QR-–∫–æ–¥—É
    useEffect(() => {
        const handleQRCodeJoin = async () => {
            const urlParams = new URLSearchParams(window.location.search)
            const stationId = urlParams.get('station_id')

            if (stationId && userData) {
                try {
                    setLoading(true)
                    await joinQueue({
                        device_id: userData.device_id,
                        station_id: parseInt(stationId)
                    })

                    addNotification(
                        '‚úÖ –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏!',
                        '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é'
                    )

                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    await loadMySlots()

                    // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    window.history.replaceState({}, '', window.location.pathname)

                } catch (err) {
                    console.error('Error joining queue from QR:', err)
                    addNotification(
                        '‚ùå –û—à–∏–±–∫–∞',
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                    )
                } finally {
                    setLoading(false)
                }
            }
        }

        if (userData) {
            loadMySlots()
            handleQRCodeJoin()
        }
    }, [userData])

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    useEffect(() => {
        if (!userData) return

        const interval = setInterval(loadMySlots, 30000)
        return () => clearInterval(interval)
    }, [userData])

    // –í—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const handleLeaveQueue = async (stationId, stationName) => {
        try {
            await leaveQueue({
                device_id: userData.device_id,
                station_id: stationId
            })

            addNotification(
                'üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏',
                `–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–∞ "${stationName}"`
            )

            await loadMySlots()
        } catch (err) {
            console.error('Error leaving queue:', err)
            addNotification(
                '‚ùå –û—à–∏–±–∫–∞',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏'
            )
        }
    }

    if (loading) {
        return (
            <div className="slots-container">
                <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π...</div>
            </div>
        )
    }

    return (
        <div className="slots-container">
            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            <div className="notifications-panel">
                {notifications.map(notification => (
                    <div key={notification.id} className="notification">
                        <div className="notification-title">{notification.title}</div>
                        <div className="notification-message">{notification.message}</div>
                        <div className="notification-time">
                            {notification.timestamp.toLocaleTimeString()}
                        </div>
                    </div>
                ))}
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="slots-content">
                <h2>–ú–æ–∏ –æ—á–µ—Ä–µ–¥–∏</h2>

                {error && (
                    <div className="error-message global-error">{error}</div>
                )}

                {slots.length === 0 ? (
                    <div className="no-queues">
                        <div className="no-queues-icon">üìã</div>
                        <h3>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π</h3>
                        <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å</p>
                        <div className="qr-instruction">
                            <p>–ö–∞–∫ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å:</p>
                            <ol>
                                <li>–ù–∞–π–¥–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏</li>
                                <li>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞</li>
                                <li>–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ QR-–∫–æ–¥–∞</li>
                                <li>–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å</li>
                            </ol>
                        </div>
                    </div>
                ) : (
                    <div className='queues-list'>
                        {slots.map((slot, index) => (
                            <QueueCard
                                key={index}
                                slot={slot}
                                onLeaveQueue={handleLeaveQueue}
                            />
                        ))}
                    </div>
                )}
            </div>
        </div>
    )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—á–µ—Ä–µ–¥–∏
function QueueCard({ slot, onLeaveQueue }) {
    const getWaitTimeColor = (minutes) => {
        if (minutes <= 5) return '#28a745'
        if (minutes <= 15) return '#ffc107'
        return '#dc3545'
    }

    const getPositionText = (position) => {
        if (position === 1) return '–°–µ–π—á–∞—Å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!'
        if (position === 2) return '–í—ã —Å–ª–µ–¥—É—é—â–∏–π'
        return `${position} –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏`
    }

    return (
        <div className={`queue-card ${slot.position === 1 ? 'current-turn' : ''}`}>
            <div className="queue-header">
                <h3>{slot.station.name}</h3>
                <div className="queue-status">
                    <span className={`status-badge ${slot.position === 1 ? 'ready' : 'waiting'}`}>
                        {slot.position === 1 ? '–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ' : '–í –æ—á–µ—Ä–µ–¥–∏'}
                    </span>
                </div>
            </div>

            <div className="queue-info">
                <div className="info-row">
                    <span className="info-label">–ü–æ–∑–∏—Ü–∏—è:</span>
                    <span className="info-value highlight">
                        {getPositionText(slot.position)}
                    </span>
                </div>

                <div className="info-row">
                    <span className="info-label">–õ—é–¥–µ–π –ø–µ—Ä–µ–¥ –≤–∞–º–∏:</span>
                    <span className="info-value">{slot.people_ahead}</span>
                </div>

                <div className="info-row">
                    <span className="info-label">–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</span>
                    <span
                        className="info-value wait-time"
                        style={{ color: getWaitTimeColor(slot.estimated_wait_minutes) }}
                    >
                        {slot.estimated_wait_minutes} –º–∏–Ω—É—Ç
                    </span>
                </div>

                <div className="info-row">
                    <span className="info-label">–°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏:</span>
                    <span className="info-value">
                        {slot.current_player_exists ? '–ó–∞–Ω—è—Ç–∞' : '–°–≤–æ–±–æ–¥–Ω–∞'}
                    </span>
                </div>
            </div>

            <div className="queue-actions">
                <button
                    onClick={() => onLeaveQueue(slot.station.id, slot.station.name)}
                    className="btn-leave-queue"
                >
                    –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
                </button>
            </div>

            {slot.position === 1 && (
                <div className="current-turn-notice">
                    ‚ö° –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!
                </div>
            )}
        </div>
    )
}

export default MySlots