
import React, { useState, useEffect } from 'react';
import { QrScanner } from '@yudiel/react-qr-scanner';
import { QueueAPI } from './api';

const ParticipantApp = () => {
    const [deviceId] = useState(() => localStorage.getItem('device_id') || generateDeviceId());
    const [participant, setParticipant] = useState(null);
    const [myStatus, setMyStatus] = useState([]);
    const [scanning, setScanning] = useState(false);
    const [scannedStation, setScannedStation] = useState(null);

    function generateDeviceId() {
        const id = 'user_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('device_id', id);
        return id;
    }

    const registerParticipant = async (name) => {
        try {
            const participantData = await QueueAPI.registerParticipant(deviceId, name);
            setParticipant(participantData);
            localStorage.setItem('participant_name', name);
        } catch (error) {
            console.error('Registration failed:', error);
        }
    };

    const loadMyStatus = async () => {
        try {
            const status = await QueueAPI.getMyStatus(deviceId);
            setMyStatus(status);
        } catch (error) {
            console.error('Failed to load status:', error);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR
    const handleScan = async (result) => {
        if (result) {
            setScanning(false);
            const stationId = parseInt(result);
            
            if (isNaN(stationId)) {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–π QR-–∫–æ–¥');
                return;
            }

            setScannedStation(stationId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —ç—Ç–æ–º —Å—Ç–µ–Ω–¥–µ
            const status = myStatus.find(s => s.station.id === stationId);
            
            if (status) {
                if (status.status === 'waiting' && status.position === 1) {
                    // –ü–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ - –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
                    try {
                        await QueueAPI.startPlaying(deviceId, stationId);
                        await loadMyStatus();
                        alert('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!');
                    } catch (error) {
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
                    }
                } else if (status.status === 'playing') {
                    // –£–∂–µ –∏–≥—Ä–∞–µ—Ç - –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
                    try {
                        await QueueAPI.completePlaying(deviceId, stationId);
                        await loadMyStatus();
                        alert('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                    } catch (error) {
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É');
                    }
                } else {
                    alert('–í—ã –Ω–µ –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏');
                }
            } else {
                // –ù–µ –≤ –æ—á–µ—Ä–µ–¥–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
                if (confirm('–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –∫ —ç—Ç–æ–º—É —Å—Ç–µ–Ω–¥—É?')) {
                    try {
                        await QueueAPI.joinQueue(deviceId, stationId);
                        await loadMyStatus();
                        alert('–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å!');
                    } catch (error) {
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å');
                    }
                }
            }
        }
    };

    const joinQueue = async (stationId) => {
        try {
            await QueueAPI.joinQueue(deviceId, stationId);
            await loadMyStatus();
        } catch (error) {
            console.error('Failed to join queue:', error);
        }
    };

    const leaveQueue = async (stationId) => {
        try {
            await QueueAPI.leaveQueue(deviceId, stationId);
            await loadMyStatus();
        } catch (error) {
            console.error('Failed to leave queue:', error);
        }
    };

    useEffect(() => {
        if (participant) {
            loadMyStatus();
            const interval = setInterval(loadMyStatus, 30000);
            return () => clearInterval(interval);
        }
    }, [participant]);

    useEffect(() => {
        const savedName = localStorage.getItem('participant_name');
        if (savedName) {
            registerParticipant(savedName);
        }
    }, []);

    if (!participant) {
        return <RegistrationForm onRegister={registerParticipant} />;
    }

    return (
        <div className="participant-app">
            <header>
                <h1>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å</h1>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {participant.name}!</p>
                <button 
                    onClick={() => setScanning(!scanning)}
                    className="scan-btn"
                >
                    {scanning ? '–û—Ç–º–µ–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' : 'üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR'}
                </button>
            </header>

            {scanning && (
                <div className="qr-scanner">
                    <QrScanner
                        onDecode={handleScan}
                        onError={(error) => console.error(error)}
                    />
                    <p>–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ —É —Å—Ç–µ–Ω–¥–∞</p>
                </div>
            )}

            <div className="my-status">
                <h2>–ú–æ–∏ –æ—á–µ—Ä–µ–¥–∏</h2>
                {myStatus.map(status => (
                    <QueueStatus 
                        key={status.station.id}
                        status={status}
                        onLeaveQueue={leaveQueue}
                        onStartPlaying={() => setScannedStation(status.station.id)}
                    />
                ))}
            </div>

            <StationsList onJoinQueue={joinQueue} />
        </div>
    );
};

const QueueStatus = ({ status, onLeaveQueue, onStartPlaying }) => {
    const { station, position, people_ahead, estimated_wait_minutes, is_playing, is_next } = status;

    return (
        <div className={`queue-status ${is_playing ? 'playing' : ''}`}>
            <h3>{station.name}</h3>
            <div className="status-info">
                {is_playing ? (
                    <>
                        <span className="status-badge playing">üéÆ –ò–≥—Ä–∞–µ—Ç–µ —Å–µ–π—á–∞—Å</span>
                        <p>–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å—Ç–µ–Ω–¥—É –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</p>
                    </>
                ) : is_next ? (
                    <>
                        <span className="status-badge next">‚è∞ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!</span>
                        <p>–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å—Ç–µ–Ω–¥—É –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã</p>
                    </>
                ) : (
                    <span className="status-badge waiting">‚è≥ –í –æ—á–µ—Ä–µ–¥–∏</span>
                )}
                
                <p>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <strong>{position}</strong></p>
                <p>–õ—é–¥–µ–π –ø–µ—Ä–µ–¥ –≤–∞–º–∏: <strong>{people_ahead}</strong></p>
                <p>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <strong>{estimated_wait_minutes} –º–∏–Ω.</strong></p>
                
                <div className="actions">
                    {!is_playing && (
                        <button onClick={() => onLeaveQueue(station.id)}>
                            –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
                        </button>
                    )}
                    {is_next && !is_playing && (
                        <button onClick={onStartPlaying} className="primary">
            –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
};

const StationsList = ({ onJoinQueue }) => {
    const [stations, setStations] = useState([]);

    useEffect(() => {
        loadStations();
    }, []);

    const loadStations = async () => {
        try {
            const stationsData = await QueueAPI.getStations();
            setStations(stationsData);
        } catch (error) {
            console.error('Failed to load stations:', error);
        }
    };

    return (
        <div className="stations-list">
            <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã</h2>
            {stations.map(station => (
                <div key={station.id} className="station-card">
                    <h3>{station.name}</h3>
                    <p>{station.description}</p>
                    <p>–í—Ä–µ–º—è –∏–≥—Ä—ã: {station.game_duration / 60} –º–∏–Ω.</p>
                    <button onClick={() => onJoinQueue(station.id)}>
                        –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
                    </button>
                </div>
            ))}
        </div>
    );
};

const RegistrationForm = ({ onRegister }) => {
    const [name, setName] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (name.trim()) {
            onRegister(name.trim());
        }
    };

    return (
        <div className="registration">
            <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏</h1>
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                />
                <button type="submit">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
            </form>
        </div>
    );
};

export default ParticipantApp;
